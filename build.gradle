defaultTasks 'test'

apply plugin: 'java'
apply plugin: 'eclipse'

String srcGeneratedJavaDir = 'src/generated/java'
String srcGeneratedDir = 'src/generated'

sourceSets {
    main {
        java {
            srcDirs('src/main/java', srcGeneratedJavaDir)
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

configurations {
    xjc
}

dependencies {
    xjc 'javax.activation:activation:1.1.1'
    xjc 'com.sun.xml.bind:jaxb-impl:2.2.5-2'
    xjc 'javax.xml:jsr173:1.0'
    xjc 'stax:stax-api:1.0.1'
    xjc 'javax.xml.bind:jaxb-api:2.2.+'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.5-2'

    // use the JAXB2 Commons project to include some XJC plugins
    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics:0.6.5'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.5'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-value-constructor:3.0'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-default-value:1.1'
    
    // This plugin adds 'javax.xml.bind.annotation.XmlNs' annotations to
    // 'package-info.java' file according to specific definitions in
    // bindings.xml file. Those annotations associate namespace prefixes
    // with XML namespace URIs.
    xjc 'org.jvnet.jaxb2_commons:jaxb2-namespace-prefix:1.1'    

    compile 'javax.xml.bind:jaxb-api:2.2.+'
    compile 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.6.5'
    compile 'net.sf.saxon:Saxon-HE:9.5.1-5'
    compile 'org.apache.httpcomponents:httpclient:4.3.5'
    compile 'org.apache.httpcomponents:httpclient-cache:4.3.5'
    compile 'org.apache.httpcomponents:httpmime:4.3.5'
    compile 'org.apache.httpcomponents:fluent-hc:4.3.5'
    
    // Java-STIX library
    compile files('lib/java_stix-0.1.jar')
    
    testCompile 'junit:junit:4.11'
}


task generate << {
    String srcXsdDir = 'src/main/resources'

    ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
        classpath: configurations.xjc.asPath)

    ant.mkdir(dir: srcGeneratedJavaDir)
    ant.xjc(destdir: srcGeneratedJavaDir, header: false, readonly: true,
            extension: true, classpath: configurations.xjc.asPath) {
        // generate an equals method - this uses an XJC plugin
        arg(line: '-Xequals -XhashCode -Xfluent-api -Xvalue-constructor -Xdefault-value -Xnamespace-prefix')
        binding(dir: srcXsdDir, includes: '*.xjb')
        schema(dir: srcXsdDir, includes: '*.xsd')
        produces(dir: srcGeneratedJavaDir, includes: '**/*.java')
    }
}

task cleanGenerate << {
    ant.delete(dir: srcGeneratedJavaDir)
}

task extractSchematron << {
    ant.xslt (destdir: srcGeneratedDir, extension: ".sch", basedir: "src/main/resources",
        includes: "TAXII_XMLMessage*.xsd", classpath: configurations.compile.asPath,
        style: 'src/main/build/iso-schematron-xslt2/ExtractSchFromXSD-2.xsl')
}

task compileSchematron << {
    ant.xslt (destdir: "src/main/resources", extension: "-compiled.xsl", basedir: srcGeneratedDir,
        includes: "TAXII_XMLMessage*.sch", classpath: configurations.compile.asPath,
        style: 'src/main/build/iso-schematron-xslt2/iso_schematron_message_xslt2.xsl')    
}

javadoc {
    options.overview = "src/main/java/overview.html"
}

task dist << {
    ant.zip(destfile: "build/java-taxii.zip") {
        fileset(dir: ".", includes: "README.txt, LICENSE.txt")
        fileset(dir: "build/libs", includes: "java-taxii.jar")
    }
}

// fix dependencies so that generate gets called before compileJava
compileSchematron.dependsOn extractSchematron

generate.dependsOn extractSchematron

compileJava.dependsOn generate

dist.dependsOn jar