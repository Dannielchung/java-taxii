ROADMAP
=========
0.1
TAXII XML Message Binding Spec 1.1
- create messages programmatically
- marshal/unmarshal messages
- marshal/unmarshal content blocks (to support content-block nesting)

0.2
TAXII Default Query Spec 1.0
- Add support for Default Query Format and associated structures and messages
    bindings.

0.3
TAXII HTTP Protocol Binding Spec 1.1
- client-side interactions with server, using HTTP Protocol Binding

.
.
.

1.1.0
- Any other features needed to reach parity with libtaxii WRT TAXII 1.1  

post-1.1.0
- Add support for TAXII 1.0.
- Add support for JSON Message Binding.
- add support for creating and validating XML Signatures using Java XML Digital 
    Signature API


Things to check on marshalling/API usage in unit tests
=======================================================
* mixed content in Extended Header, 
Status Details, 
Discovery_Response/Service_Instance/Supported_Query,
Subscription_Parameters/Query,
Poll_Parameters/Query,
Content_Block/Content

* @status_type a union between xs:string and xs:anyURI - make sure constants are available
for known status types

* Check javax.xml.datatype.XMLGregorianCalendar, the default binding for xs:dateTime.
    Does it always map to dateTime values that are valid according to the regex for
    TimestampLabelType in the schema?  If not, need to do a custom mapping so that
    only valid timestamps are created via the API.


Things to check on unmarshalling/API usage in unit tests
===========================================================
* digital signatures 

* verify that schema validation detects if Subscription_ID and Poll_Parameters
are both set in Poll_Request

* Does unmarshalling detect dateTime values that are invalid according to the regex for
    TimestampLabelType in the schema?  Does it require schema validation to
    detect it?


Things the schema doesn't check - need to add custom validation code for these
===============================================================================
StatusMessage
----------------
* co-occurrence constraints between @status_type and 
    specific <Detail> elements, expressed using XPath 2 
    - @status_type = 'INVALID_RESPONSE_PART' and (taxii:Status_Detail/taxii:Detail[@name='MAX_PART_NUMBER'] castable as xs:positiveInteger) 
    - @status_type = 'PENDING'               and (taxii:Status_Detail/taxii:Detail[@name='ESTIMATED_WAIT']  castable as xs:positiveInteger) 
    - @status_type = 'PENDING'               and (taxii:Status_Detail/taxii:Detail[@name='RESULT_ID']       castable as xs:anyURI)
    - @status_type = 'PENDING'               and (taxii:Status_Detail/taxii:Detail[@name='WILL_PUSH']       castable as xs:boolean)

* type checking on predefined Status Detail fields
    - @status_type = 'DESTINATION_COLLECTION_ERROR' and (taxii:Status_Detail/taxii:Detail[@name='ACCEPTABLE_DESTINATION'] castable as xs:anyURI)
    - @status_type = 'NOT_FOUND'                    and (taxii:Status_Detail/taxii:Detail[@name='ITEM']                   castable as xs:anyURI)
    - @status_type = 'RETRY'                        and (taxii:Status_Detail/taxii:Detail[@name='ESTIMATED_WAIT']         castable as xs:positiveInteger)
    - @status_type = 'UNSUPPORTED_MESSAGE'          and (taxii:Status_Detail/taxii:Detail[@name='SUPPORTED_BINDING']      castable as xs:anyURI)
    - @status_type = 'UNSUPPORTED_CONTENT'          and (taxii:Status_Detail/taxii:Detail[@name='SUPPORTED_CONTENT']      castable as xs:anyURI)
    - @status_type = 'UNSUPPORTED_PROTOCOL'         and (taxii:Status_Detail/taxii:Detail[@name='SUPPORTED_PROTOCOL']     castable as xs:anyURI)
    - @status_type = 'UNSUPPORTED_QUERY'            and (taxii:Status_Detail/taxii:Detail[@name='SUPPORTED_QUERY']        castable as xs:anyURI)

Subscription_Management_Request
-----------------------------------
* co-occurrence constraints
    - Subscription_ID MUST be present if @action="UNSUBSCRIBE", @action="PAUSE", or @action="RESUME".
    - Subscription_Parameters is present if and only if @action="SUBSCRIBE".

Poll_Request
---------------
* co-occurrence constraint
    - Note that if both <Exclusive_Begin_Timestamp> 
and <Inclusive_End_Timestamp> are present in this message, the value in <Inclusive_End_Timestamp> 
MUST be greater than the value in <Exclusive_Begin_Timestamp>.  

Poll_Response
-----------------
* co-occurrence constraint: @result_id MUST be present if @more="true".


Inbox_Message and Poll_Response
-------------------------------- 
* co-occurrence constraint: 
    Record_Count >= count(Content_Block)


Additional tasks
================
* Write utility factory methods to facilitate creating valid messages via the API. 
* Generate license blurb at top of each generated file.
* Add to Travis CI.
* Run example code in TaxiiXml through a command-line driver to test it out.
* look at mapping extended headers and status details using 
    a map instead of a list - that would make it easier to find headers
    or status details by name.  Look at using a multimap to allow a Status Detail
    or Extended Header to have a collection of list of values and avoid 
    marshalling problems in XML.
    See http://stackoverflow.com/questions/11329388/jaxb-mapping-for-a-map
* Prevent users from creating a StatusDetail or Extended Header with a list of
    Strings as a value.  A list of strings in a mixed content field collapses
    to a *single* text field when marshalled.  The right way to express a 
    Status Detail or Extended Header with multiple values is to *repeat* the
    name and give it another value.  The XML should look like this:
    <Status_Detail>
        <Detail name="custom_status_detail_name">Custom status detail value</Detail>
        <Detail name="Custom_detail_2">this one has</Detail>
        <Detail name="Custom_detail_2">multiple values</Detail>
    </Status_Detail>
