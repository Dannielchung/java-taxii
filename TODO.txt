ROADMAP
=========
0.1
TAXII XML Message Binding Spec 1.1
- create messages programmatically
- marshal/unmarshal messages
- marshal/unmarshal content blocks (to support content-block nesting)

0.2
TAXII Default Query Spec 1.0
- Add support for Default Query Format and associated structures and messages
    bindings.

0.3
- add support for creating XML Signatures using Java XML Digital Signature API

0.4
TAXII HTTP Protocol Binding Spec 1.1
- client-side interactions with server, using HTTP Protocol Binding

.
.
.

1.1.0
- Any other features needed to reach parity with libtaxii WRT TAXII 1.1  

post-1.1.0
- Add support for TAXII 1.0.
- Add support for JSON Message Binding.


Things to check on marshalling/API usage in unit tests
=======================================================
* mixed content in Extended Header, 
Status Details, 
Discovery_Response/Service_Instance/Supported_Query,
Subscription_Parameters/Query,
Poll_Parameters/Query,
Content_Block/Content

* @status_type a union between xs:string and xs:anyURI - make sure constants are available
for known status types

* Check javax.xml.datatype.XMLGregorianCalendar, the default binding for xs:dateTime.
    Does it always map to dateTime values that are valid according to the regex for
    TimestampLabelType in the schema?  If not, need to do a custom mapping so that
    only valid timestamps are created via the API.


Things to check on unmarshalling/API usage in unit tests
===========================================================
* digital signatures 

* verify that schema validation detects if Subscription_ID and Poll_Parameters
are both set in Poll_Request

* Does unmarshalling detect dateTime values that are invalid according to the regex for
    TimestampLabelType in the schema?  Does it require schema validation to
    detect it?


Things the schema doesn't check
==================================
* co-occurence constraints between @status_type and <Status_Detail> and
specific <Detail> elements - could be checked with Schematron, Relax-NG, or Java.
A supplementary Relax-NG schema could just validate <Status_Detail> without duplicating
the XML Schema.  Hmmmm, would have to write custom accessors in Java so that 
you can only create valid messages via the API....

* Subscription_Management_Request/Subscription_ID: An XML AnyURI containing a 
Subscription ID value. This field MUST be present if @action="UNSUBSCRIBE", @action="PAUSE", or @action="RESUME".

* Subscription_Management_Request/Subscription_Parameters: 
This field is present if and only if @action="SUBSCRIBE".

* co-occurence constraint on Poll_Request: Note that if both <Exclusive_Begin_Timestamp> 
and <Inclusive_End_Timestamp> are present in this message, the value in <Inclusive_End_Timestamp> 
MUST be greater than the value in <Exclusive_Begin_Timestamp>.  

* co-occurence constraint on Poll_Response: @result_id MUST be present if @more="true".

* co-occurrence constraint: Context: Inbox_Message or Poll_Response
    Record_Count >= count(Content_Block)


Notes for Java
================
* Supplement schema validation with in-code checks. 
* validating digital signature on deserialization/unmarshalling?  does libtaxii do this?  
how does it handle digital signatures?
